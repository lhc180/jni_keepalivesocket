
#include "SocketHolder.h"


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <netdb.h>

#include <signal.h>

extern "C" {
void sigroutine(int dunno);
}

SocketHolder::SocketHolder(){
	signal(SIGHUP, sigroutine); //* 下面设置三个信号的处理方法 
signal(SIGINT, sigroutine); 
signal(SIGPIPE, sigroutine); 

};




SocketHolder::~SocketHolder(){
	if(mSocket > 0){
		close(mSocket);
	}
};


int SocketHolder::lt_connect(char* sHost, int nPort){

	if(mSocket <0){
		return -1;
	}

	struct hostent *host;
    struct sockaddr_in serv_addr;

	 if((host=gethostbyname(sHost)) == NULL) {
        herror("gethostbyname出错！");
       return -2;
    }

    serv_addr.sin_family=AF_INET;
    serv_addr.sin_port=htons(nPort);
    serv_addr.sin_addr = *((struct in_addr *)host->h_addr);
    bzero(&(serv_addr.sin_zero),8);
    if(connect(mSocket, (struct sockaddr *)&serv_addr, sizeof(struct sockaddr)) == -1) {
        perror("connect出错！");
       return -3;
    }


	return 0;
}


int SocketHolder::lt_init(){
	if((mSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
		   perror("socket创建出错！");
		  mSocket= 0;
		  return -1;
	   }

	int optval;
   socklen_t optlen = sizeof(optval);

	/* Check the status for the keepalive option */
	   if(getsockopt(mSocket, SOL_SOCKET, SO_KEEPALIVE, &optval, &optlen) < 0) {
		  perror("getsockopt()");
		  close(mSocket);
		  mSocket= 0;
		  return -2;
	   }
	   printf("SO_KEEPALIVE is %s\n", (optval ? "ON" : "OFF"));
	
	   /* Set the option active */
	   optval = 1;
	   optlen = sizeof(optval);
	   if(setsockopt(mSocket, SOL_SOCKET, SO_KEEPALIVE, &optval, optlen) < 0) {
		  perror("setsockopt()");
		  close(mSocket);
		  mSocket= 0;
		  return -3;
	   }
	   printf("SO_KEEPALIVE set on socket\n");
	
	   /* Check the status again */
	   if(getsockopt(mSocket, SOL_SOCKET, SO_KEEPALIVE, &optval, &optlen) < 0) {
		  perror("getsockopt()");
		  close(mSocket);
		  mSocket= 0;
		  return -4;
	   }


	return 0;
}

int SocketHolder::lt_send(char* content, int length){

int sendbytes = -1;
	if((sendbytes=send(mSocket, content, length, 0)) == -1) {
		   perror("send出错！");
		   return -1;
	   }


	return sendbytes;
}

int SocketHolder::lt_readSync(char*buffer, int buf_length){
	int readbyte = -1;

readbyte = recv(mSocket, buffer, buf_length,0);

if(readbyte == -1){
	 perror("recv出错！");
		   return -1;
}


return readbyte;
}


